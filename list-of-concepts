Mental Model of How a Computer works
	CPU
	Registers
	Memory
		Bytes
			Binary
			Hex
		Addresses
		Fetching values by address
	Machine code
		instructions
		Assembly language
	Stack
	Heap
Compiler
	gcc
	clang
	-Wall -Wextra
	-o
	-g
	-fsanitize=address
	-fsanitize=undefined
Makefiles and make
CMake

C language
hello world
	main
	printf
variables
types
	int
		stdint.h
	char
	float
	double
declarations
assignments/static initializers
arithmetic operators
type conversions / type casting
increment/decrement
bitwise operators
relational and logical operators

control flow
	if/if else
	conditional expressions (false = 0, true = non-zero)
	ternary operator
	switch
	for
	while
	do-while
	break
	continue
	goto
	return

arrays
pointers
	strings
	equivalence of arrays and pointers
	pointer arithmetic on arrays
	ARRAYSIZE macro
	argc, and argv[] parameters to main()

functions
parameters
variable length parameter lists
pass by value
local variables and scope rules
static local variables
block structure (curly braces)
recursion

structs
sizeof
offsetof
the preprocessor
	#include
	#define
	#if
	#ifdef
storage classes (static, register, volatile, extern)
static initializers
pointers to functions
typedefs
	when and when not to use typedefs
debugging tips
	printf
		wolf fence
	compare working system to non-working system
		git bisect
	gdb
		start
		bt
		eXtra Awesome mode (aka tui mode)
		layout
		breakpoints
		watchpoints (hw & sw)
		info threads
		core files
			ulimit -c unlimited
			where does linux hide core files
buffered i/o:
	stdin, stdout, stderr,
	fprintf
	fscanf
	fopen
	fclose
	fread
	fwrite

unbuffered i/o
	open
	read
	write
	close
	lseek/llseek
	tell

string functions
	strlen
	strcpy
		strncpy
		strlcpy
	strcat
		strncat
	strcmp
		strncmp
	snprintf
	strtok

malloc/free

setjmp/longjmp?

qsort/qsort_r
	callback functions

modules
	header files define API
	c files implement API
	functions should be static by default unless part of API
	Avoid global state, prefer to pass it around
	prefix names

